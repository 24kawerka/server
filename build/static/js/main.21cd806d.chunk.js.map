{"version":3,"sources":["Constants/actionTypeConstants.ts","Redux/User/listReducer.ts","Redux/Admin/usersReducer.ts","Redux/User/userReducer.ts","Redux/Admin/tasksUserForAmin.ts","Redux/Utils/reducer.ts","Redux/Utils/createStore.ts","Constants/routeConstants.ts","Redux/Admin/AdminPageSelector.ts","http/index.js","http/userAPI.js","Components/AdminPage/UserForAdmin.tsx","Constants/utilsConstants.tsx","Redux/User/UserPageSelector.ts","http/listAPI.js","Components/UserPage/Task/Task.tsx","Redux/Utils/createThunk.ts","Components/UserPage/UserInfo/UserInfo.tsx","routes.ts","Components/AdminPage/AdminPage.tsx","Components/UserPage/UserPage.tsx","Components/Login/Auth.tsx","Components/Login/Registration.tsx","Components/AppRouter.tsx","index.tsx"],"names":["SET_LIST","GET_LIST","GET_USERS","GET_USER","GET_ISAUTH","SET_USER","SET_ISAUTH","SET_NEW_TASK","SET_TASKS_FOR_ADMIN","SET_NEW_TASK_LIST","InitialListState","list","isAuth","setUserList","responce","type","InitialUsersState","users","getUsers","InitialUserState","user","setUser","setIsAuth","data","InitialTasks","listForAdmin","setTasksForAdmin","tasks","persistConfig","key","storage","whitelist","rootReducer","combineReducers","state","action","map","p","push","task","tasksUserForAdmin","persistReducer","middlewares","thunkMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","persistor","persistStore","ADMIN_ROUTE","USER_ROUTE","LOGIN_ROUTE","REGISTRATION_ROUTE","$host","axios","create","baseURL","process","$authHost","interceptors","request","use","config","headers","authorization","localStorage","getItem","registration","email","password","firstName","lastName","a","post","role","isOnline","setItem","token","jwt_decode","login","getAllUsers","get","getUserTasksForAdmin","id","changeFirstName","put","changeLastName","deleteUser","delete","changeIsActive","UserForAdmin","props","dispatch","useDispatch","deleteUserCreator","then","resp","sort","b","filter","setIsActive","alert","className","onClick","socket","io","getList","createTask","title","isDone","deleteTask","changeTask","doneTask","Task","useForm","handleSubmit","register","useSelector","UserSelector","useState","inputField","showInputField","onSubmit","newTask","emit","userId","deleteTaskCreator","deleteTaskCreatorThunk","newList","doneTaskCreator","doneTaskThunk","name","placeholder","ref","required","updatedAt","slice","UserInfo","userSelector","history","useHistory","firstNameInput","showFirstNameInput","lastNameInput","showLastNameInput","newFirstName","newLastName","authRoutes","path","Component","AdminSelector","Admin","useEffect","on","newTaskId","index","e","createdItem","length","createTaskThunk","target","reset","publicRoutes","response","to","AppRouter","route","component","exact","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.21cd806d.chunk.js","sourcesContent":["const SET_LIST = 'SET_LIST'\nconst GET_LIST = 'GET_LIST'\nconst GET_USERS = 'GET_USERS'\nconst GET_USER = 'GET_USER'\nconst GET_ISAUTH = 'GET_ISAUTH'\nconst SET_USER = 'SET_USER'\nconst SET_ISAUTH = 'SET_ISAUTH'\nconst SET_IS_LOADING = 'SET_IS_LOADING'\nconst SET_NEW_TASK = 'SET_NEW_TASK'\nconst SET_TASKS_FOR_ADMIN = 'SET_TASKS_FOR_ADMIN'\nconst SET_NEW_TASK_LIST = 'SET_NEW_TASK_LIST'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst CHANGE_TASK = 'CHANGE_TASK'\n\n\nexport {\n    SET_LIST, GET_USERS, GET_USER, GET_ISAUTH, SET_USER, SET_ISAUTH,\n    SET_IS_LOADING, GET_LIST, SET_NEW_TASK, SET_TASKS_FOR_ADMIN, SET_NEW_TASK_LIST,\n    SET_CURRENT_PAGE, CHANGE_TASK\n}","import { SET_LIST, GET_LIST, SET_NEW_TASK } from '../../Constants/actionTypeConstants'\n\ntype TaskType = { title: string, isDone: boolean, id: number, userId: number, updatedAt: string }\n\ntype InitialListStateType = {\n    list: Array<TaskType>,\n    isAuth: boolean\n}\nconst InitialListState: InitialListStateType = {\n    list: [],\n    isAuth: true\n}\n\ntype getListActionType = {\n    type: typeof GET_LIST\n}\ntype setListActionType = {\n    type: typeof SET_LIST,\n    responce: Array<TaskType>\n}\ntype setNewTaskType = {\n    type: typeof SET_NEW_TASK,\n    task: TaskType\n}\ntype listReducerActionType = getListActionType | setListActionType | setNewTaskType\n\nconst listReducer = (state = InitialListState, action: listReducerActionType): InitialListStateType => {\n    switch (action.type) {\n        case SET_LIST: {\n            return {\n                ...state,\n                list: action.responce.map(p => p),\n            }\n        }\n        case GET_LIST: {\n            return {\n                ...state,\n            }\n        }\n        case SET_NEW_TASK: {\n            state.list.push(action.task)\n            return {\n                ...state,\n            }\n        }\n        default: return state\n    }\n}\n\nconst setUserList = (responce: Array<TaskType>) => {\n    return {\n        type: SET_LIST,\n        responce\n    }\n}\nconst getUserList = () => {\n    return {\n        type: GET_LIST\n    }\n}\nconst setNewTask = (task: TaskType) => {\n    return {\n        type: SET_NEW_TASK,\n        task\n    }\n}\n\n\n\nexport { listReducer, setUserList, getUserList, setNewTask }\nexport type { InitialListStateType, TaskType }","import { GET_USERS } from '../../Constants/actionTypeConstants'\n\ntype UsersType = { firstName: string, lastName: string, id: number, isOnline: boolean, role: string }\n\ntype InitialUsersStateType = {\n    users: Array<UsersType>,\n    isAuth: boolean\n}\nconst InitialUsersState: InitialUsersStateType = {\n    users: [],\n    isAuth: true\n}\ntype usersReducerActionType = {\n    type: typeof GET_USERS,\n    users: Array<UsersType>\n}\n\nconst usersReducer = (state = InitialUsersState, action: usersReducerActionType): InitialUsersStateType => {\n    switch (action.type) {\n        case GET_USERS: {\n            return {\n                ...state,\n                users: action.users.map(p => p)\n            }\n        }\n        default: return state\n    }\n}\nconst getUsers = (users: Array<UsersType>) => {\n    return {\n        type: GET_USERS,\n        users\n    }\n}\n\nexport { usersReducer, getUsers }\nexport type { InitialUsersStateType, UsersType }","import { GET_ISAUTH, GET_USER, SET_ISAUTH, SET_USER } from '../../Constants/actionTypeConstants'\n\ntype UserType = {\n    email: string\n    exp: number\n    firstName: string\n    iat: number\n    id: number\n    lastName: string\n    role: string\n}\n\ntype InitialUserStateType = {\n    user: any,\n    isAuth: boolean\n}\n\nconst InitialUserState: InitialUserStateType = {\n    user: {},\n    isAuth: false\n}\ntype getuserReducerActionType = {\n    type: typeof GET_USER\n}\ntype getIsAuthReducerActionType = {\n    type: typeof GET_ISAUTH\n}\ntype setuserReducerActionType = {\n    type: typeof SET_USER,\n    responce: UserType\n}\ntype setIsAuthReducerActionType = {\n    type: typeof SET_ISAUTH,\n    data: boolean\n}\ntype userReducerActionType = getuserReducerActionType | getIsAuthReducerActionType | setuserReducerActionType | setIsAuthReducerActionType\n\nconst userReducer = (state = InitialUserState, action: userReducerActionType): InitialUserStateType => {\n    switch (action.type) {\n        case GET_USER: {\n            return {\n                ...state\n\n            }\n        }\n        case GET_ISAUTH: {\n            return {\n                ...state,\n            }\n        }\n        case SET_USER: {\n            return {\n                ...state,\n                user: action.responce\n            }\n        }\n        case SET_ISAUTH: {\n            return {\n                ...state,\n                isAuth: action.data\n            }\n        }\n\n        default: return state\n    }\n}\n\nconst setUser = (responce: any) => {\n    return {\n        type: SET_USER,\n        responce\n    }\n}\nconst setIsAuth = (data: boolean) => {\n    return {\n        type: SET_ISAUTH,\n        data\n    }\n}\n\nexport { userReducer, setUser, setIsAuth }\nexport type { InitialUserStateType, UserType }","import { SET_NEW_TASK_LIST, SET_TASKS_FOR_ADMIN } from \"../../Constants/actionTypeConstants\"\n\n\ntype tasksForAdminType = {\n    title: string | null,\n    isDone: boolean | null,\n    userId: number | null,\n    updatedAt: string\n}\n\ntype InitialTasksType = {\n    listForAdmin: Array<tasksForAdminType>\n}\nconst InitialTasks: InitialTasksType = {\n    listForAdmin: []\n}\ntype setTasksForAdminActionType = {\n    type: typeof SET_TASKS_FOR_ADMIN,\n    tasks: Array<tasksForAdminType>\n}\ntype setNewTaskListActionType = {\n    type: typeof SET_NEW_TASK_LIST,\n    data: tasksForAdminType\n}\n\ntype tasksUserForAdminActionType = setTasksForAdminActionType | setNewTaskListActionType\n\nconst tasksUserForAdminReducer = (state = InitialTasks, action: tasksUserForAdminActionType): InitialTasksType => {\n    switch (action.type) {\n        case SET_TASKS_FOR_ADMIN: {\n            return {\n                ...state,\n                listForAdmin: action.tasks.map(p => p)\n            }\n        }\n        case SET_NEW_TASK_LIST: {\n            state.listForAdmin.push(action.data)\n            return {\n                ...state,\n            }\n        }\n        default: return state\n    }\n}\n\nconst setTasksForAdmin = (tasks: Array<tasksForAdminType>) => {\n    return {\n        type: SET_TASKS_FOR_ADMIN,\n        tasks\n    }\n}\n\nconst setNewTaskList = (data: tasksForAdminType) => {\n    return {\n        type: SET_NEW_TASK_LIST,\n        data\n    }\n}\n\nexport { tasksUserForAdminReducer, setTasksForAdmin, setNewTaskList }\n\nexport type { tasksForAdminType }","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'\nimport { listReducer } from '../User/listReducer';\nimport { usersReducer } from '../Admin/usersReducer';\nimport { userReducer } from '../User/userReducer';\nimport { tasksUserForAdminReducer } from '../Admin/tasksUserForAmin';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['list', 'users', 'user',]\n}\n\nconst rootReducer = combineReducers({\n    list: listReducer,\n    users: usersReducer,\n    user: userReducer,\n    tasksUserForAdmin: tasksUserForAdminReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default persistReducer<RootState>(persistConfig, rootReducer);","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore } from 'redux-persist';\nimport thunkMiddleware from 'redux-thunk'\nimport reducers from './reducer'\n\nconst middlewares = [thunkMiddleware]\nexport const store: any = createStore(reducers, composeWithDevTools(applyMiddleware(...middlewares)));\nexport const persistor = persistStore(store)","export const ADMIN_ROUTE = '/admin'\nexport const USER_ROUTE = '/user'\nexport const LOGIN_ROUTE = '/login'\nexport const REGISTRATION_ROUTE = '/registration'\n","import { RootState } from '../Utils/reducer';\n\nexport default {\n    getIsAuth: (state: RootState) => state.users.isAuth,\n    getUsers: (state: RootState) => state.users.users,\n    getTasksUserForAdmin:(state:RootState)=>state.tasksUserForAdmin.listForAdmin\n}","import axios from 'axios'\n\nconst $host = axios.create({\n    baseURL: process.env.REACT_APP_API_URL\n})\nconst $authHost = axios.create({\n    baseURL: process.env.REACT_APP_API_URL\n})\n\nconst authInterceptor = config => {\n    config.headers.authorization = `Bearer ${localStorage.getItem('token')}`\n    return config\n}\n$authHost.interceptors.request.use(authInterceptor)\n\nexport{\n    $host,$authHost\n}","import { $host, $authHost } from './index'\nimport jwt_decode from 'jwt-decode'\n\nexport const registration = async (email, password, firstName, lastName) => {\n    const { data } = await $host.post('api/user/registration', { email, password, firstName, lastName, role: 'USER', isOnline: true })\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\nexport const login = async (email, password) => {\n    const { data } = await $host.post('api/user/login', { email, password })\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\nexport const getAllUsers = async () => {\n    const { data } = await $authHost.get('api/user/users')\n    return data\n}\nexport const getUserTasksForAdmin = async (id) => {\n    const { data } = await $authHost.get(`/api/task/tasksforadmin/${id}`)\n    return data\n}\nexport const changeFirstName = async (id, firstName) => {\n    const { data } = await $authHost.put(`api/user/firstname/${id}`, { firstName })\n    return data\n}\nexport const changeLastName = async (id, lastName) => {\n    const { data } = await $authHost.put(`api/user/lastname/${id}`, { lastName })\n    return data\n}\nexport const deleteUser = async (id) => {\n    const { data } = await $authHost.delete(`api/user/users/${id}`)\n    return data\n}\nexport const changeIsActive = async (id) => {\n    const { data } = await $authHost.put(`api/user/isactive/${id}`)\n    return data\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { changeIsActive, deleteUser, getAllUsers, getUserTasksForAdmin } from '../../http/userAPI'\nimport '../../Styles/Admin/admin.scss'\nimport { setTasksForAdmin } from '../../Redux/Admin/tasksUserForAmin'\nimport { getUsers, UsersType } from '../../Redux/Admin/usersReducer'\n\n\n\ntype UserType = {\n    users: {\n        firstName: string,\n        lastName: string,\n        id: number,\n        isOnline: boolean\n    }\n}\n\nconst UserForAdmin = (props: UserType) => {\n    const dispatch = useDispatch()\n    const showUserTasks = (id: number) => {\n        getUserTasksForAdmin(id).then(resp => {\n            dispatch(setTasksForAdmin(\n                resp.sort((a: any, b: any) => a.id - b.id)\n            ))\n        })\n    }\n    const deleteUserCreator = async (id: number) => {\n        await deleteUser(id).then(responce => {\n            getAllUsers().then(resp => {\n                dispatch(getUsers(\n                    resp.sort((a: any, b: any) => a.id - b.id).filter((user: UsersType) => user.role === 'USER')\n                ))\n            })\n        })\n    }\n    const setIsActive = async (id: number) => {\n        await changeIsActive(id).then(resp => {\n            getAllUsers().then(resp => {\n                dispatch(getUsers(\n                    resp.sort((a: any, b: any) => a.id - b.id).filter((user: UsersType) => user.role === 'USER')\n                ))\n            })\n            alert('Изменен статус пользователя!')\n        })\n\n    }\n    return (\n        <div className='user-list-container'>\n            <button className='show-tasks'\n                onClick={() => showUserTasks(props.users.id)} >\n                {`${props.users.firstName} ${props.users.lastName}`}\n            </button>\n            {props.users.isOnline === true ?\n                <button onClick={() => setIsActive(props.users.id)}>&#128274;</button>\n                :\n                <button onClick={() => setIsActive(props.users.id)}>&#128275;</button>\n            }\n            <button onClick={() => deleteUserCreator(props.users.id)}>x</button>\n\n        </div>\n    )\n}\n\n\n\nexport { UserForAdmin }","import { io } from 'socket.io-client'\nconst ENDPOINT = \"https://lit-brushlands-23738.herokuapp.com/\"\nconst socket = io(ENDPOINT)\nexport { socket }","import { RootState } from '../Utils/reducer';\n\nexport default {\n    setUserList: (state: RootState) => state.list.list,\n    getIsAuth: (state: RootState) => state.list.isAuth,\n    getUser: (state: RootState) => state.user.user,\n    getIsAuthUser: (state: RootState) => state.user.isAuth,\n    getUserList: (state: RootState) => state.list.list,\n}","import { $authHost } from './index'\n\n\nconst getList = async () => {\n    const { data } = await $authHost.get('api/task')\n    return data\n}\nconst createTask = async (title, isDone) => {\n    const { data } = await $authHost.post('api/task', { title, isDone })\n    return data\n}\nconst deleteTask = async (id) => {\n    const { data } = await $authHost.delete(`api/task/${id}`)\n    return data\n}\n\nconst changeTask = async (id, title, isDone) => {\n    const { data } = await $authHost.put(`api/task/${id}`, { title, isDone })\n    return data\n}\nconst doneTask = async (id) => {\n    const { data } = await $authHost.put(`/api/task/done/${id}`)\n    return data\n}\n\nexport { getList, createTask, deleteTask, changeTask, doneTask }","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { changeTask, getList } from '../../../http/listAPI'\nimport '../../../Styles/User/task.scss'\nimport UserSelector from '../../../Redux/User/UserPageSelector'\nimport { setUserList, TaskType } from '../../../Redux/User/listReducer'\nimport { useForm } from 'react-hook-form'\nimport { doneTaskThunk, deleteTaskCreatorThunk } from '../../../Redux/Utils/createThunk'\nimport { socket } from '../../../Constants/utilsConstants'\n\ntype PropsTaskType = {\n    task: {\n        title: string,\n        isDone: boolean,\n        id: number,\n        userId: number,\n        updatedAt: string\n    }\n}\n\nconst Task = (props: PropsTaskType) => {\n    const { handleSubmit, register } = useForm()\n    const list = useSelector(UserSelector.getUserList)\n    const dispatch = useDispatch()\n    const [inputField, showInputField] = useState(1)\n\n\n    //need changes local change task and create thunk\n    const onSubmit = async (newTask: any) => {\n        await changeTask(props.task.id, newTask.newTask, props.task.isDone).then(resp => {\n            getList().then((responce: any) => {\n                dispatch(setUserList(\n                    responce.sort((a: any, b: any) => a.id - b.id)\n                ))\n            })\n        })\n        socket.emit('changeTask', props.task.userId)\n        showInputField(1)\n    }\n\n    const deleteTaskCreator = (data: any) => {\n        dispatch(deleteTaskCreatorThunk(data))\n        const newList = list.filter((task: TaskType) => task.id !== data.id)\n        dispatch(setUserList(\n            newList.sort((a: any, b: any) => a.id - b.id)\n        ))\n        socket.emit('deleteTask', (data))\n    }\n    const doneTaskCreator = (newTask: any) => {\n        dispatch(doneTaskThunk(newTask))\n        socket.emit('doneTask', (props.task.userId))\n    }\n    const showTime = () => {\n        alert(`Закончена ${props.task.updatedAt.slice(0, 10)} в ${props.task.updatedAt.slice(11, -5)}`)\n    }\n\n    return (\n        <div className='task-container'>\n            {inputField === 1 ?\n                <div className='title-task-container'>\n                    {props.task.isDone === false ?\n                        <div className='title'>{props.task.title}</div>\n                        :\n                        <div className='title-done'>{props.task.title}</div>\n                    }\n                    {props.task.isDone === false ?\n                        <button onClick={() => showInputField(2)} className='change-button'>Изменить</button>\n                        :\n                        null}\n                </div>\n                :\n                <form className=\"form-inline\" onSubmit={handleSubmit(onSubmit)}>\n                    <div className='title-task-input'>\n                        <div className=\"form-group mx-sm-3 mb-2\">\n                            <input type=\"text\" name=\"newTask\" placeholder={props.task.title}\n                                ref={register({ required: true })} />\n                        </div>\n                        <button type=\"submit\" className='submit-button'>&#10004;</button>\n                        <button onClick={() => showInputField(1)} className='return-button'>&#10006;</button>\n                    </div>\n                </form>\n            }\n            {props.task.isDone === false ?\n                <button onClick={() => doneTaskCreator(props.task)} className='done-button'>Завершить</button>\n                :\n                <>\n                    <button className='done-button' onClick={showTime}>\n                        Закончена\n                </button>\n\n                </>\n            }\n            <button onClick={() => deleteTaskCreator(props.task)} className='delete-button'>\n                Удалить\n                      </button>\n\n        </div >\n    )\n}\nexport { Task }\n","import { socket } from \"../../Constants/utilsConstants\"\nimport { createTask, deleteTask, doneTask, getList } from \"../../http/listAPI\"\nimport { setUserList, TaskType } from \"../User/listReducer\"\n\n\n\nconst createTaskThunk = (data: TaskType) => async (dispatch: any) => {\n    await createTask(data.title, data.isDone = false)\n    getList().then((responce: any) => {\n        dispatch(setUserList(\n            responce.sort((a: any, b: any) => a.id - b.id)\n        ))\n        const createdItem = responce[responce.length - 1]\n        socket.emit('createTask', createdItem)\n    })\n}\n\nconst doneTaskThunk = (newTask: any) => async (dispatch: any) => {\n    await doneTask(newTask.id)\n    getList().then((responce: any) => {\n        dispatch(setUserList(\n            responce.sort((a: any, b: any) => a.id - b.id)\n        ))\n    })\n}\nconst deleteTaskCreatorThunk = (data: any) => async (dispatch: any) => {\n    await deleteTask(data.id)\n}\n\n\n\nexport { createTaskThunk, doneTaskThunk, deleteTaskCreatorThunk }","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport userSelector from '../../../Redux/User/UserPageSelector'\nimport '../../../Styles/User/userInfo.scss'\nimport { UserType } from '../../../Redux/User/userReducer'\nimport { changeFirstName, changeLastName } from '../../../http/userAPI'\nimport { useForm } from 'react-hook-form'\nimport { useHistory } from 'react-router-dom'\nimport { LOGIN_ROUTE } from '../../../Constants/routeConstants'\nimport { socket } from '../../../Constants/utilsConstants'\n\nconst UserInfo = () => {\n    const user: UserType = useSelector(userSelector.getUser)\n    const { handleSubmit, register } = useForm()\n    const history = useHistory()\n    const [firstNameInput, showFirstNameInput] = useState(1)\n    const [lastNameInput, showLastNameInput] = useState(1)\n\n    type newFirstNameType = {\n        newFirstName: string\n    }\n    type newLastNameType = {\n        newLastName: string\n    }\n    const changeUserFirstName = (newFirstName: newFirstNameType) => {\n        changeFirstName(user.id, newFirstName.newFirstName).then(resp => {\n            socket.emit('changeFirstName', user.id)\n            alert('Имя изменено, перезайдите в аккаунт');\n            history.push(LOGIN_ROUTE)\n\n        })\n    }\n    const changeUserLastName = (newLastName: newLastNameType) => {\n        changeLastName(user.id, newLastName.newLastName).then(resp => {\n            socket.emit('changeLastName', user.id)\n            alert('Фамилия изменена, перезайдите в аккаунт');\n            history.push(LOGIN_ROUTE)\n        })\n    }\n    return (\n        <div>\n            <div className='name-container'>\n                {firstNameInput === 1 ?\n                    <> <div className='name'>{user.firstName}</div>\n                        <button className='change-name-button' onClick={() => showFirstNameInput(2)}>Сменить</button></>\n                    :\n                    <div>\n                        <form className=\"form-inline\" onSubmit={handleSubmit(changeUserFirstName)}>\n                            <div className='user-input'>\n                                <div className=\"form-group mx-sm-3 mb-2\">\n                                    <input type=\"text\" name=\"newFirstName\" placeholder='Имя' className='input-field'\n                                        ref={register({ required: true })} />\n                                </div>\n                                <button type=\"submit\" className='submit-user-button'>&#10004;</button>\n                                <button onClick={() => showFirstNameInput(1)} className='return-user-button'>&#10006;</button>\n                            </div>\n                        </form>\n                    </div>\n                }\n            </div>\n            <div className='name-container'>\n                {lastNameInput === 1 ?\n                    <> <div className='name'>{user.lastName}</div>\n                        <button className='change-name-button' onClick={() => showLastNameInput(2)}>Сменить</button></>\n                    :\n                    <div>\n                        <form className=\"form-inline\" onSubmit={handleSubmit(changeUserLastName)}>\n                            <div className='user-input'>\n                                <div className=\"form-group mx-sm-3 mb-2\">\n                                    <input type=\"text\" name=\"newLastName\" placeholder='Фамилия'\n                                        ref={register({ required: true })} />\n                                </div>\n                                <button type=\"submit\" className='submit-user-button'>&#10004;</button>\n                                <button onClick={() => showLastNameInput(1)} className='return-user-button'>&#10006;</button>\n                            </div>\n                        </form>\n                    </div>\n                }\n\n\n            </div>\n        </div >\n    )\n}\nexport { UserInfo }","import { ADMIN_ROUTE, USER_ROUTE, LOGIN_ROUTE, REGISTRATION_ROUTE } from './Constants/routeConstants';\nimport { AdminPage } from \"./Components/AdminPage/AdminPage\";\nimport { UserPage } from './Components/UserPage/UserPage';\nimport { Auth } from './Components/Login/Auth';\nimport { Registration } from './Components/Login/Registration';\n\nexport const authRoutes = [\n    {\n        path: ADMIN_ROUTE,\n        Component: AdminPage\n    },\n    {\n        path: USER_ROUTE,\n        Component: UserPage\n    }\n]\nexport const publicRoutes = [\n    {\n        path: LOGIN_ROUTE,\n        Component: Auth\n    },\n    {\n        path: REGISTRATION_ROUTE,\n        Component: Registration\n\n    }\n]","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport '../../Styles/Admin/admin.scss'\nimport AdminSelector from '../../Redux/Admin/AdminPageSelector'\nimport { getUsers, UsersType } from '../../Redux/Admin/usersReducer'\nimport { UserForAdmin } from './UserForAdmin'\nimport { getAllUsers, getUserTasksForAdmin } from '../../http/userAPI'\nimport Admin from '../../Redux/Admin/AdminPageSelector'\nimport { setTasksForAdmin, tasksForAdminType } from '../../Redux/Admin/tasksUserForAmin'\nimport { setIsAuth, setUser } from '../../Redux/User/userReducer'\nimport { useHistory } from 'react-router-dom'\nimport { LOGIN_ROUTE } from '../../Constants/routeConstants'\nimport { socket } from '../../Constants/utilsConstants'\n\n\n\nconst AdminPage = () => {\n    const users = useSelector(AdminSelector.getUsers)\n    const tasks = useSelector(Admin.getTasksUserForAdmin)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        getAllUsers().then(resp => {\n            dispatch(getUsers(\n                resp.sort((a: any, b: any) => a.id - b.id).filter((user: UsersType) => user.role === 'USER')\n            ))\n        })\n    }, [])\n    useEffect(() => {\n        socket.on('newUserRegister', () => {\n            alert('Добавлен новый пользователь');\n            getAllUsers().then(resp => {\n                dispatch(getUsers(\n                    resp.sort((a: any, b: any) => a.id - b.id).filter((user: UsersType) => user.role === 'USER')\n                ))\n            })\n\n        })\n    }, [socket])\n    const logOut = () => {\n        dispatch(setIsAuth(false))\n        dispatch(setUser({}))\n        history.push(LOGIN_ROUTE)\n    }\n    useEffect(() => {\n        socket.on('deleteTaskNotify', (data: any) => {\n            getUserTasksForAdmin(data.userId).then(resp => {\n                dispatch(setTasksForAdmin(\n                    resp.sort((a: any, b: any) => a.id - b.id)\n                ))\n            })\n        })\n    }, [socket, dispatch])\n    useEffect(() => {\n        socket.on('createTaskNotify', (data: any) => {\n            getUserTasksForAdmin(data.userId).then(resp => {\n                dispatch(setTasksForAdmin(\n                    resp.sort((a: any, b: any) => a.id - b.id)\n                ))\n            })\n        })\n    }, [socket, dispatch])\n    useEffect(() => {\n        socket.on('changeTaskNotify', (newTask: any) => {\n            getUserTasksForAdmin(newTask).then(resp => {\n                dispatch(setTasksForAdmin(\n                    resp.sort((a: any, b: any) => a.id - b.id)\n                ))\n            })\n        })\n    }, [socket, dispatch])\n    useEffect(() => {\n        socket.on('doneTaskNotify', (newTaskId: any) => {\n            getUserTasksForAdmin(newTaskId).then(resp => {\n                dispatch(setTasksForAdmin(\n                    resp.sort((a: any, b: any) => a.id - b.id)\n                ))\n            })\n        })\n    }, [socket, dispatch])\n    useEffect(() => {\n        socket.on('changeFirstNameNotify', (id: number) => {\n            getAllUsers().then(resp => {\n                dispatch(getUsers(\n                    resp.sort((a: any, b: any) => a.id - b.id).filter((user: UsersType) => user.role === 'USER')\n                ))\n            })\n        })\n    }, [socket, dispatch])\n    useEffect(() => {\n        socket.on('changeLastNameNotify', (id: number) => {\n            getAllUsers().then(resp => {\n                dispatch(getUsers(\n                    resp.sort((a: any, b: any) => a.id - b.id).filter((user: UsersType) => user.role === 'USER')\n                ))\n            })\n        })\n    }, [socket, dispatch])\n    return (\n        <div className='admin-container'>\n            <div className='wrapper'>\n                <div className='users-side' >\n                    <h2>Пользователи</h2>\n                    <div>\n                        {users.map((users: UsersType) =>\n                            <UserForAdmin key={users.id} users={users} />\n                        )}\n                    </div>\n                </div>\n                <div className='tasks-side'>\n                    <div className='tasks-title'>\n                        <h2>Список задач</h2>\n                        <button className='log-out' onClick={logOut}>Выйти</button>\n                    </div>\n                    <div>\n                        {tasks.map((task: tasksForAdminType, index: number) =>\n                            <div key={index}>\n                                {task.isDone === false ?\n                                    <div className='user-task' >{task.title}</div>\n                                    :\n                                    <div className='task-done-wrapper'>\n                                        <span className='user-task-done' >{task.title} </span>\n                                        <span className='doneTime'>\n                                            Закончена {task.updatedAt.slice(0, 10)} в {task.updatedAt.slice(11, -5)}\n                                        </span>\n                                    </div>\n                                }\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport { AdminPage }","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setUserList, TaskType } from '../../Redux/User/listReducer'\nimport UserSelector from '../../Redux/User/UserPageSelector'\nimport { Task } from './Task/Task'\nimport '../../Styles/User/userPage.scss'\nimport { UserInfo } from './UserInfo/UserInfo'\nimport { setUser, setIsAuth } from '../../Redux/User/userReducer'\nimport { useHistory } from 'react-router-dom'\nimport { LOGIN_ROUTE } from '../../Constants/routeConstants'\nimport { getList } from '../../http/listAPI'\nimport { useForm } from 'react-hook-form'\nimport { createTaskThunk } from '../../Redux/Utils/createThunk'\n\n\nconst UserPage = () => {\n\n    const list = useSelector(UserSelector.getUserList)\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { handleSubmit, register } = useForm()\n\n    useEffect((() => {\n        getList().then((responce: any) => {\n            dispatch(setUserList(\n                responce.sort((a: any, b: any) => a.id - b.id)\n            ))\n        })\n    }), [])\n\n    const logOut = () => {\n        dispatch(setIsAuth(false))\n        dispatch(setUser({}))\n        history.push(LOGIN_ROUTE)\n    }\n\n    const onSubmit = (data: TaskType, e: any) => {\n        dispatch(createTaskThunk(data))\n        e.target.reset()\n    }\n\n    return (\n        <div className='app-container'>\n            <div className='app-wrapper'>\n                <div className='user-info'>\n                    <UserInfo />\n                    <button onClick={logOut} className='log-out-button'>Выйти</button>\n                </div>\n                <div className='task-list'>\n                    <form className=\"px-4 py-3\" onSubmit={handleSubmit(onSubmit)}>\n                        <div className='form-group'>\n                            <input name=\"title\" type=\"text\" placeholder='Новая задача'\n                                className=\"form-control\" ref={register({ required: true })} />\n                        </div>\n                        <button type='submit'>Создать</button>\n                    </form>\n                    {list.map((task: TaskType) =>\n                        <Task key={task.id} task={task} />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\nexport { UserPage }","import React from 'react'\nimport { useForm } from 'react-hook-form'\nimport { useDispatch } from 'react-redux'\nimport { NavLink, useHistory } from 'react-router-dom'\nimport { ADMIN_ROUTE, REGISTRATION_ROUTE, USER_ROUTE } from '../../Constants/routeConstants'\nimport { login } from '../../http/userAPI'\nimport { setIsAuth, setUser } from '../../Redux/User/userReducer'\nimport '../../Styles/auth.scss'\n\n\ntype DataLoginType = {\n    email: string,\n    password: string\n}\nconst Auth = () => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { handleSubmit, register } = useForm()\n    const onSubmit = async (data: DataLoginType, e: any) => {\n        try {\n            const responce: any = await login(data.email, data.password)\n            dispatch(setUser(responce))\n            dispatch(setIsAuth(true))\n            e.target.reset()\n            if (responce.role === \"ADMIN\") {\n                history.push(ADMIN_ROUTE + `?id=${responce.id}`)\n            } else {\n                history.push(USER_ROUTE + `?id=${responce.id}`)\n            }\n        }\n        catch (error) {\n            e.target.reset()\n            alert(error.request.response.slice(12, -2));\n\n        }\n    }\n\n    return (\n        <div className='container'>\n            <div className='login-form'>\n                <h1>TODO ПРИЛОЖЕНИЕ</h1>\n                <form className=\"px-4 py-3\" onSubmit={handleSubmit(onSubmit)}>\n                    <div className='form-group'>\n                        <label className=\"form-label\">Email</label>\n                        <input name=\"email\" type=\"text\" placeholder='email@gmail.com'\n                            className=\"form-control\" ref={register({ required: true })} />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label className=\"form-label\">Пароль</label>\n                        <input name=\"password\" className=\"form-control\" type=\"password\" placeholder='Пароль'\n                            ref={register({ required: true })}\n                        />\n                    </div>\n                    <div>\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                            Войти\n                    </button>\n                        <NavLink to={REGISTRATION_ROUTE}><div className='regist-link'>Создать аккаунт</div></NavLink>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport { Auth }\n","import React from 'react'\nimport { useForm } from 'react-hook-form'\nimport { registration } from '../../http/userAPI'\nimport '../../Styles/auth.scss'\nimport { setIsAuth, setUser } from '../../Redux/User/userReducer'\nimport { useHistory } from 'react-router-dom'\nimport { LOGIN_ROUTE } from '../../Constants/routeConstants'\nimport { useDispatch } from 'react-redux'\nimport { socket } from '../../Constants/utilsConstants'\n\n\nconst Registration = () => {\n    const { handleSubmit, register } = useForm()\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const onSubmit = async (data: any) => {\n        const responce = await registration(data.email, data.password, data.firstName, data.lastName)\n        dispatch(setUser(responce))\n        dispatch(setIsAuth(true))\n        socket.emit('newUser')\n        history.push(LOGIN_ROUTE)\n    }\n    return (\n        <div className='container'>\n            <div className='login-form'>\n                <h1>РЕГИСТРАЦИЯ</h1>\n                <form className=\"px-4 py-3\" onSubmit={handleSubmit(onSubmit)}>\n                    <div className='form-group'>\n                        <label className=\"form-label\">Имя</label>\n                        <input name=\"firstName\" type=\"text\" placeholder='Введите имя'\n                            className=\"form-control\"\n                            ref={register({ required: true })} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"form-label\">Фамилия</label>\n                        <input name=\"lastName\" className=\"form-control\" type=\"text\" placeholder='Фамилия'\n                            ref={register({ required: true })} />\n                    </div>\n                    <div className='form-group'>\n                        <label className=\"form-label\">Email</label>\n                        <input name=\"email\" type=\"text\" placeholder='email@gmail.com'\n                            className=\"form-control\" ref={register({ required: true })} />\n                    </div>\n                    <div className=\"mb-3\">\n                        <label className=\"form-label\">Пароль</label>\n                        <input name=\"password\" className=\"form-control\" type=\"password\" placeholder='Пароль'\n                            ref={register({ required: true })}\n                        />\n                    </div>\n                    <button className=\"btn btn-primary\" type='submit' >\n                        Создать\n                    </button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport { Registration }\n","import React from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { authRoutes, publicRoutes } from '../routes'\nimport { LOGIN_ROUTE } from '../Constants/routeConstants'\n\nconst AppRouter = () => {\n    return (\n        <Switch>\n            {authRoutes.map((route) =>\n                <Route key={route.path} path={route.path} component={route.Component} exact />\n            )}\n            {publicRoutes.map((route) =>\n                <Route key={route.path} path={route.path} component={route.Component} exact />\n            )}\n            <Redirect to={LOGIN_ROUTE} />\n        </Switch>\n    )\n}\nexport { AppRouter }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { persistor, store } from './Redux/Utils/createStore';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {HashRouter } from 'react-router-dom';\nimport { AppRouter } from './Components/AppRouter';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <HashRouter>\n          <AppRouter />\n        </HashRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}